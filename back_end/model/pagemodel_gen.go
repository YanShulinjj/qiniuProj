// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pageFieldNames          = builder.RawFieldNames(&Page{})
	pageRows                = strings.Join(pageFieldNames, ",")
	pageRowsExpectAutoSet   = strings.Join(stringx.Remove(pageFieldNames, "`page_id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	pageRowsWithPlaceHolder = strings.Join(stringx.Remove(pageFieldNames, "`page_id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"

	cachePagePageIdPrefix        = "cache:page:pageId:"
	cachePageUserIdPageIdsPrefix = "cache:page:userId:pageIds:"
	cachePageUserIdPageIdxPrefix = "cache:page:userId:pageIdx:"
)

type (
	pageModel interface {
		Insert(ctx context.Context, data *Page) (sql.Result, error)
		FindOne(ctx context.Context, pageId int64) (*Page, error)
		FindMany(ctx context.Context, userId int64) ([]*Page, error)
		FindOneByUserIdPageIdx(ctx context.Context, userId int64, pageIdx int64) (*Page, error)
		Update(ctx context.Context, data *Page) error
		Delete(ctx context.Context, pageId int64) error
	}

	defaultPageModel struct {
		sqlc.CachedConn
		table string
	}

	Page struct {
		PageId     int64     `db:"page_id"`     // 页面ID
		UserId     int64     `db:"user_id"`     // 用户id
		PageIdx    int64     `db:"page_idx"`    // 用户的第idx个页面
		PageName   string    `db:"page_name"`   // 页面别名
		SvgPath    string    `db:"svg_path"`    // 页面svg文件路径
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newPageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPageModel {
	return &defaultPageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`page`",
	}
}

func (m *defaultPageModel) Delete(ctx context.Context, pageId int64) error {
	data, err := m.FindOne(ctx, pageId)
	if err != nil {
		return err
	}

	pagePageIdKey := fmt.Sprintf("%s%v", cachePagePageIdPrefix, pageId)
	pageUserIdPageIdxKey := fmt.Sprintf("%s%v:%v", cachePageUserIdPageIdxPrefix, data.UserId, data.PageIdx)
	pageUserIdPageIdsKey := fmt.Sprintf("%s%v", cachePageUserIdPageIdsPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `page_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, pageId)
	}, pagePageIdKey, pageUserIdPageIdxKey, pageUserIdPageIdsKey)
	return err
}

func (m *defaultPageModel) FindOne(ctx context.Context, pageId int64) (*Page, error) {
	pagePageIdKey := fmt.Sprintf("%s%v", cachePagePageIdPrefix, pageId)
	var resp Page
	err := m.QueryRowCtx(ctx, &resp, pagePageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `page_id` = ? limit 1", pageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, pageId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPageModel) FindMany(ctx context.Context, userId int64) ([]*Page, error) {
	pageUserIdPageIdsKey := fmt.Sprintf("%s%v", cachePageUserIdPageIdsPrefix, userId)
	var resp []*Page
	err := m.QueryRowCtx(ctx, &resp, pageUserIdPageIdsKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ?", pageRows, m.table)
		return conn.QueryRowsCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPageModel) FindOneByUserIdPageIdx(ctx context.Context, userId int64, pageIdx int64) (*Page, error) {
	pageUserIdPageIdxKey := fmt.Sprintf("%s%v:%v", cachePageUserIdPageIdxPrefix, userId, pageIdx)
	var resp Page
	err := m.QueryRowIndexCtx(ctx, &resp, pageUserIdPageIdxKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `page_idx` = ? limit 1", pageRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, pageIdx); err != nil {
			return nil, err
		}
		return resp.PageId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPageModel) Insert(ctx context.Context, data *Page) (sql.Result, error) {
	pagePageIdKey := fmt.Sprintf("%s%v", cachePagePageIdPrefix, data.PageId)
	pageUserIdPageIdxKey := fmt.Sprintf("%s%v:%v", cachePageUserIdPageIdxPrefix, data.UserId, data.PageIdx)
	pageUserIdPageIdsKey := fmt.Sprintf("%s%v", cachePageUserIdPageIdsPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, pageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.PageIdx, data.PageName, data.SvgPath)
	}, pagePageIdKey, pageUserIdPageIdxKey, pageUserIdPageIdsKey)
	return ret, err
}

func (m *defaultPageModel) Update(ctx context.Context, newData *Page) error {
	data, err := m.FindOne(ctx, newData.PageId)
	if err != nil {
		return err
	}

	pagePageIdKey := fmt.Sprintf("%s%v", cachePagePageIdPrefix, data.PageId)
	pageUserIdPageIdxKey := fmt.Sprintf("%s%v:%v", cachePageUserIdPageIdxPrefix, data.UserId, data.PageIdx)
	pageUserIdPageIdsKey := fmt.Sprintf("%s%v", cachePageUserIdPageIdsPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `page_id` = ?", m.table, pageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.PageIdx, newData.PageName, newData.SvgPath, newData.PageId)
	}, pagePageIdKey, pageUserIdPageIdxKey, pageUserIdPageIdsKey)
	return err
}

func (m *defaultPageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePagePageIdPrefix, primary)
}

func (m *defaultPageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `page_id` = ? limit 1", pageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPageModel) tableName() string {
	return m.table
}
